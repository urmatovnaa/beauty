# Generated by Django 4.1.7 on 2023-03-29 14:41

import client.validators
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('firstname', models.CharField(max_length=100, validators=[client.validators.validate_english], verbose_name='first name')),
                ('lastname', models.CharField(max_length=100, validators=[client.validators.validate_english], verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('skin_type', models.CharField(blank=True, choices=[('N', 'Normal'), ('O', 'Oily'), ('C', 'Combination'), ('D', 'Dry'), ('S', 'Sensitive')], max_length=25, null=True, verbose_name='skin type')),
                ('shade_group', models.CharField(blank=True, choices=[('L', 'Light'), ('LM', 'Light medium'), ('M', 'Medium'), ('MT', 'Medium tan'), ('MD', 'Medium deep'), ('D', 'Deep')], max_length=20, null=True, verbose_name='shade group')),
                ('age_range', models.CharField(blank=True, choices=[('18-24', '18-24'), ('25-34', '25-34'), ('35-44', '35-44'), ('45-54', '45-54'), ('55+', '55+')], max_length=10, null=True, verbose_name='age range')),
                ('date_joined', models.DateField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
